# Ultralytics YOLO ðŸš€, AGPL-3.0 license
# YOLO11 object detection model with P2-P5 outputs + BiFPN in head

# Parameters
nc: 80 # number of classes
scales: # model compound scaling constants
  n: [0.50, 0.25, 1024]
  s: [0.50, 0.50, 1024]
  m: [0.50, 1.00, 512]
  l: [1.00, 1.00, 512]
  x: [1.00, 1.50, 512]

# ---------------------------
# Backbone (original)
# indices 0..11
# ---------------------------
backbone:
  - [-1, 1, Conv, [64, 3, 2]]            # 0 - P1/2
  - [-1, 1, Conv, [128, 3, 2]]           # 1 - P2/4
  - [-1, 2, C3k2, [256, False, 0.25]]    # 2 - P2 feature
  - [-1, 1, Conv, [256, 3, 2]]           # 3 - pre P3
  - [-1, 2, C3k2, [512, False, 0.25]]    # 4 - P3 output
  - [-1, 1, Conv, [512, 3, 2]]           # 5 - pre P4
  - [-1, 2, C3k2, [512, True]]           # 6 - P4 output
  - [-1, 1, Conv, [1024, 3, 2]]          # 7 - pre P5
  - [-1, 2, C3k2, [1024, True]]          # 8 - deeper P5
  - [-1, 1, SPPF, [1024, 5]]             # 9
  - [-1, 2, C2PSA, [1024]]               # 10 - P5 attention
  - [-1, 1, MHSA, [14, 4, 4]]            # 11 - MHSA after C2PSA (final P5 feature)

# ---------------------------
# Head (with BiFPN). Strategy:
#  - project P2/P3/P4/P5 -> bifpn_channels (256)
#  - run top-down BiFPN fusions and bottom-up fusions similar to YOLOv8-BiFPN style
#  - after fusion use C3k2 to set final channels for Detect:
#      P2 -> 128, P3 -> 256, P4 -> 512, P5 -> 1024
# ---------------------------
head:
  # --- projections (1x1) to align channels for BiFPN
  - [4, 1, Conv, [256, 1, 1]]            # 12 <- proj from backbone node 4 (P3)
  - [6, 1, Conv, [256, 1, 1]]            # 13 <- proj from backbone node 6 (P4)
  - [11, 1, Conv, [256, 1, 1]]           # 14 <- proj from backbone node 11 (P5 after MHSA)
  - [2, 1, Conv, [256, 1, 1]]            # 15 <- proj from backbone node 2 (P2)

  # Top-down path: P5 -> P4
  - [14, 1, nn.Upsample, [None, 2, "nearest"]]  # 16: upsample P5_proj (node14)
  - [[-1, 13], 1, BiFPN, [256]]                 # 17: BiFPN(P5â†‘, P4_proj)  (inputs 256)
  - [-1, 3, C3k2, [256, False]]                 # 18: P4' (post fusion, keep 256 for intermediate)

  # Top-down: P4' -> P3
  - [-1, 1, nn.Upsample, [None, 2, "nearest"]]  # 19: upsample node18 (P4'â†‘)
  - [[-1, 12], 1, BiFPN, [256]]                 # 20: BiFPN(P4'â†‘, P3_proj)
  - [-1, 3, C3k2, [256, False]]                 # 21: P3' (post fusion, 256)

  # Top-down: P3' -> P2
  - [-1, 1, nn.Upsample, [None, 2, "nearest"]]  # 22: upsample node21 (P3'â†‘)
  - [[-1, 15], 1, BiFPN, [256]]                 # 23: BiFPN(P3'â†‘, P2_proj)
  - [-1, 2, C3k2, [128, False]]                 # 24: P2' (final P2 output, 128 channels desired)

  # Bottom-up: P2' -> P3 (downsample and fuse with P3 paths)
  - [-1, 1, Conv, [256, 3, 2]]                  # 25: P2' -> P3 scale (proj back to 256)
  - [[-1, 12, 21], 1, BiFPN, [256]]             # 26: BiFPN(P2â†“, P3_proj, P3')
  - [-1, 3, C3k2, [256, False]]                 # 27: P3_refined (final P3 output, 256)

  # Bottom-up: P3_refined -> P4
  - [27, 1, Conv, [256, 3, 2]]                  # 28: P3_refined -> P4 scale
  - [[-1, 13, 18], 1, BiFPN, [256]]             # 29: BiFPN(P3â†“, P4_proj, P4')
  - [-1, 3, C3k2, [512, False]]                 # 30: P4_refined (final P4 output, 512 channels)

  # Bottom-up: P4_refined -> P5
  - [-1, 1, Conv, [256, 3, 2]]                  # 31: P4_refined -> P5 scale (use 256 for fusion input)
  - [[31, 14], 1, BiFPN, [256]]                 # 32: BiFPN(P4â†“, P5_proj)
  - [-1, 3, C3k2, [1024, True]]                 # 33: P5_refined (final P5 output; keep 1024)

  # Detect on P2, P3, P4, P5
  - [[24, 27, 30, 33], 1, Detect, [nc]]         # Detect(P2, P3, P4, P5)
