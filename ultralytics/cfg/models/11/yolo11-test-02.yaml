# Ultralytics YOLO üöÄ, AGPL-3.0 license
# YOLO11 object detection model with P2-P5 outputs + BiFPN in head (Max mAP Hybrid)

# Parameters
nc: 80 # number of classes
scales: # model compound scaling constants
  n: [0.50, 0.25, 1024]
  s: [0.50, 0.50, 1024]
  m: [0.50, 1.00, 512]
  l: [1.00, 1.00, 512]
  x: [1.00, 1.50, 512]

# ---------------------------
# Backbone (original)
# indices 0..11
# ---------------------------
backbone:
  - [-1, 1, Conv, [64, 3, 2]]            # 0 - P1/2
  - [-1, 1, Conv, [128, 3, 2]]           # 1 - P2/4
  - [-1, 2, C3k2, [256, False, 0.25]]    # 2 - P2 feature
  - [-1, 1, Conv, [256, 3, 2]]           # 3 - pre P3
  - [-1, 2, C3k2, [512, False, 0.25]]    # 4 - P3 output
  - [-1, 1, Conv, [512, 3, 2]]           # 5 - pre P4
  - [-1, 2, C3k2, [512, True]]           # 6 - P4 output
  - [-1, 1, Conv, [1024, 3, 2]]          # 7 - pre P5
  - [-1, 2, C3k2, [1024, True]]          # 8 - deeper P5
  - [-1, 1, SPPF, [1024, 5]]             # 9
  - [-1, 1, C2PSA, [1024]]               # 10 - P5 attention (context)
  - [-1, 1, MHSA, [4]]                   # 11 - MHSA @P5 (heads=4), final P5 feature

# ---------------------------
# Head (with BiFPN). Strategy:
#  - project P2/P3/P4/P5 -> bifpn_channels (256)
#  - run top-down BiFPN fusions and bottom-up fusions similar to YOLOv8-BiFPN style
#  - after fusion use C3k2 to set final channels for Detect:
#      P2 -> 128, P3 -> 256, P4 -> 512, P5 -> 1024
# ---------------------------
head:
  # --- projections (1x1) to align channels for BiFPN
  - [4, 1, Conv, [256, 1, 1]]            # 12 <- P3
  - [6, 1, Conv, [256, 1, 1]]            # 13 <- P4
  - [11, 1, Conv, [256, 1, 1]]           # 14 <- P5 (after MHSA)
  - [2,  1, Conv, [256, 1, 1]]           # 15 <- P2

  # Top-down: P5 -> P4
  - [14, 1, nn.Upsample, [None, 2, "nearest"]]  # 16: upsample P5_proj
  - [[-1, 13], 1, BiFPN, [256]]                 # 17: fuse (P5‚Üë, P4_proj)
  - [-1, 3, C3k2, [256, False]]                 # 18: P4'

  # Top-down: P4' -> P3
  - [-1, 1, nn.Upsample, [None, 2, "nearest"]]  # 19: P4'‚Üë
  - [[-1, 12], 1, BiFPN, [256]]                 # 20: fuse (P4'‚Üë, P3_proj)
  - [-1, 3, C3k2, [256, False]]                 # 21: P3'
  - [-1, 1, TripletAttention, [256]]            # 22: P3' -> TripletAtt (boost small/occluded)

  # Top-down: P3'(att) -> P2
  - [-1, 1, nn.Upsample, [None, 2, "nearest"]]  # 23: P3'‚Üë
  - [[-1, 15], 1, BiFPN, [256]]                 # 24: fuse (P3'‚Üë, P2_proj)
  - [-1, 2, C3k2, [128, False]]                 # 25: P2' (final P2, 128 ch)

  # Bottom-up: P2' -> P3
  - [-1, 1, Conv, [256, 3, 2]]                  # 26: P2' -> P3 scale
  - [[-1, 12, 22], 1, BiFPN, [256]]             # 27: fuse (P2‚Üì, P3_proj, P3'(att))
  - [-1, 4, C3k2, [256, False]]                 # 28: P3_refined (‚Üë depth to 4)

  # Bottom-up: P3_refined -> P4
  - [-1, 1, Conv, [256, 3, 2]]                  # 29: -> P4 scale
  - [[-1, 13, 18], 1, BiFPN, [256]]             # 30: fuse (P3‚Üì, P4_proj, P4')
  - [-1, 3, C3k2, [512, False]]                 # 31: P4_refined

  # Bottom-up: P4_refined -> P5
  - [-1, 1, Conv, [256, 3, 2]]                  # 32: -> P5 scale
  - [[-1, 14], 1, BiFPN, [256]]                 # 33: fuse (P4‚Üì, P5_proj)  # d√πng -1 nh·∫•t qu√°n
  - [-1, 3, C3k2, [1024, True]]                 # 34: P5_refined (final P5)

  # Detect on P2, P3, P4, P5
  - [[25, 28, 31, 34], 1, Detect, [nc]]         # Detect(P2, P3, P4, P5)
