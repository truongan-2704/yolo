# Ultralytics YOLO ðŸš€, AGPL-3.0 license
# YOLO11 backbone (giá»¯ nguyÃªn) + MHSA@P5 + BiFPN head (P3-P5) + light att (ECA@P3, P4)

# Parameters
nc: 80
scales:
  n: [0.50, 0.25, 1024]
  s: [0.50, 0.50, 1024]
  m: [0.50, 1.00, 512]
  l: [1.00, 1.00, 512]
  x: [1.00, 1.50, 512]

# ---------------------------
# Backbone (KEEP ORIGINAL YOLO11 + MHSA @ P5)
# ---------------------------
backbone:
  - [-1, 1, Conv, [64, 3, 2]]            # 0 - P1/2
  - [-1, 1, Conv, [128, 3, 2]]           # 1 - P2/4
  - [-1, 2, C3k2, [256, False, 0.25]]    # 2 - P2
  - [-1, 1, Conv, [256, 3, 2]]           # 3 - pre P3
  - [-1, 2, C3k2, [512, False, 0.25]]    # 4 - P3
  - [-1, 1, Conv, [512, 3, 2]]           # 5 - pre P4
  - [-1, 2, C3k2, [512, True]]           # 6 - P4
  - [-1, 1, Conv, [1024, 3, 2]]          # 7 - pre P5
  - [-1, 2, C3k2, [1024, True]]          # 8 - deeper P5
  - [-1, 1, SPPF, [1024, 5]]             # 9
  - [-1, 1, C2PSA, [1024]]               # 10 - P5 context
  - [-1, 1, MHSA, [2]]                   # 11 - MHSA @ P5 (heads=2)

# ---------------------------
# Head (BiFPN P3-P5, + ECA @ P3/P4)
# ---------------------------
head:
  # Project -> 256 cho BiFPN
  - [4,  1, Conv, [256, 1, 1]]           # 12 <- P3 proj
  - [6,  1, Conv, [256, 1, 1]]           # 13 <- P4 proj
  - [11, 1, Conv, [256, 1, 1]]           # 14 <- P5 proj (sau MHSA)

  # Top-down: P5 -> P4
  - [14, 1, nn.Upsample, [None, 2, "nearest"]]  # 15: P5â†‘
  - [[-1, 13], 1, BiFPN, [256]]                 # 16: fuse (P5â†‘, P4_proj)
  - [-1, 3, C3k2, [256, False]]                 # 17: P4' (refine)

  # Top-down: P4' -> P3
  - [17, 1, nn.Upsample, [None, 2, "nearest"]]  # 18: P4'â†‘
  - [[-1, 12], 1, BiFPN, [256]]                 # 19: fuse (P4'â†‘, P3_proj)
  - [-1, 3, C3k2, [256, False]]                 # 20: P3' (refine)
  - [-1, 1, ECA, [256]]                         # 21: P3_att (light, â†‘P)

  # Bottom-up: P3_att -> P4
  - [21, 1, Conv, [256, 3, 2]]                  # 22: P3_att -> P4 scale
  - [[-1, 13, 17], 1, BiFPN, [256]]             # 23: fuse (P3â†“, P4_proj, P4')
  - [-1, 3, C3k2, [512, False]]                 # 24: P4_out (refine)
  - [-1, 1, ECA, [512]]                         # 25: P4_att (light, á»•n Ä‘á»‹nh P/R)

  # Bottom-up: P4_att -> P5
  - [25, 1, Conv, [256, 3, 2]]                  # 26: P4_att -> P5 scale
  - [[-1, 14], 1, BiFPN, [256]]                 # 27: fuse (P4â†“, P5_proj)
  - [-1, 3, C3k2, [1024, True]]                 # 28: P5_out (refine)

  # Detect trÃªn P3, P4, P5 (dÃ¹ng output sau ECA)
  - [[21, 25, 28], 1, Detect, [nc]]             # Detect(P3_att, P4_att, P5_out)
