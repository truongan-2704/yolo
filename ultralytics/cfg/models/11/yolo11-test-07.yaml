# Ultralytics YOLO üöÄ, AGPL-3.0 license
# YOLO11 backbone (gi·ªØ nguy√™n) + BiFPN head (P3-P5) theo phong c√°ch v8-BiFPN
# + MHSA @ P5 trong backbone

# Parameters
nc: 80
scales:
  n: [0.50, 0.25, 1024]
  s: [0.50, 0.50, 1024]
  m: [0.50, 1.00, 512]
  l: [1.00, 1.00, 512]
  x: [1.00, 1.50, 512]

# ---------------------------
# Backbone (KEEP ORIGINAL YOLO11 + MHSA @ P5)
# ---------------------------
backbone:
  - [-1, 1, Conv, [64, 3, 2]]            # 0 - P1/2
  - [-1, 1, Conv, [128, 3, 2]]           # 1 - P2/4
  - [-1, 2, C3k2, [256, False, 0.25]]    # 2 - P2
  - [-1, 1, Conv, [256, 3, 2]]           # 3 - pre P3
  - [-1, 2, C3k2, [512, False, 0.25]]    # 4 - P3
  - [-1, 1, Conv, [512, 3, 2]]           # 5 - pre P4
  - [-1, 2, C3k2, [512, True]]           # 6 - P4
  - [-1, 1, Conv, [1024, 3, 2]]          # 7 - pre P5
  - [-1, 2, C3k2, [1024, True]]          # 8 - deeper P5
  - [-1, 1, SPPF, [1024, 5]]             # 9
  - [-1, 1, C2PSA, [1024]]               # 10 - P5 context
  - [-1, 1, MHSA, [2]]                   # 11 - NEW: MHSA @ P5 (heads=2, nh·∫π & hi·ªáu qu·∫£)

# ---------------------------
# Head (BiFPN P3-P5, g·ªçn - nhanh)
# ---------------------------
head:
  # 1) Project v·ªÅ 256 k√™nh ƒë·ªÉ h·ª£p nh·∫•t BiFPN
  - [4,  1, Conv, [256, 1, 1]]           # 12 <- P3 proj
  - [6,  1, Conv, [256, 1, 1]]           # 13 <- P4 proj
  - [11, 1, Conv, [256, 1, 1]]           # 14 <- P5 proj (sau MHSA)

  # 2) Top-down: P5 -> P4
  - [14, 1, nn.Upsample, [None, 2, "nearest"]]  # 15: P5‚Üë
  - [[-1, 13], 1, BiFPN, [256]]                 # 16: fuse (P5‚Üë, P4_proj)
  - [-1, 3, C3k2, [256, False]]                 # 17: P4' (refine)

  # 3) Top-down: P4' -> P3
  - [17, 1, nn.Upsample, [None, 2, "nearest"]]  # 18: P4'‚Üë
  - [[-1, 12], 1, BiFPN, [256]]                 # 19: fuse (P4'‚Üë, P3_proj)
  - [-1, 3, C3k2, [256, False]]                 # 20: P3' (refine)

  # 4) Bottom-up: P3' -> P4
  - [20, 1, Conv, [256, 3, 2]]                  # 21: P3' -> P4 scale
  - [[-1, 13, 17], 1, BiFPN, [256]]             # 22: fuse (P3‚Üì, P4_proj, P4')
  - [-1, 3, C3k2, [512, False]]                 # 23: P4_out (refine)

  # 5) Bottom-up: P4_out -> P5
  - [23, 1, Conv, [256, 3, 2]]                  # 24: P4_out -> P5 scale
  - [[-1, 14], 1, BiFPN, [256]]                 # 25: fuse (P4‚Üì, P5_proj)
  - [-1, 3, C3k2, [1024, True]]                 # 26: P5_out (refine)

  # 6) Detect tr√™n P3, P4, P5
  - [[20, 23, 26], 1, Detect, [nc]]             # Detect(P3, P4, P5)
